import socket
import ssl
import threading
import sys

# --- C·∫§U H√åNH CLIENT ---
HOST = 'localhost'
PORT = 12345
# Client c·∫ßn file cert c·ªßa server ƒë·ªÉ x√°c th·ª±c
SERVER_CERT_FILE = './certificates/server-cert.crt'

def receive_messages(ssl_socket):
    """Ch·∫°y tr√™n lu·ªìng ri√™ng ƒë·ªÉ nh·∫≠n tin nh·∫Øn t·ª´ server."""
    while True:
        try:
            data = ssl_socket.recv(1024)
            if not data:
                break
            # X·ª≠ l√Ω giao di·ªán ƒë·ªÉ kh√¥ng b·ªã l·∫´n v·ªõi d√≤ng nh·∫≠p li·ªáu
            sys.stdout.write('\r' + ' ' * 60 + '\r') 
            print(data.decode('utf-8'))
            sys.stdout.write('> ')
            sys.stdout.flush()
        except (ssl.SSLError, ConnectionAbortedError):
            break
    print("\nüîå M·∫•t k·∫øt n·ªëi ƒë·∫øn server.")

def main():
    """H√†m ch√≠nh ƒë·ªÉ k·∫øt n·ªëi v√† t∆∞∆°ng t√°c."""
    # T·∫°o SSL context, y√™u c·∫ßu x√°c th·ª±c ch·ª©ng ch·ªâ c·ªßa server
    context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
    context.verify_mode = ssl.CERT_REQUIRED
    # T·∫£i ch·ª©ng ch·ªâ c·ªßa server ƒë·ªÉ tin t∆∞·ªüng
    try:
        context.load_verify_locations(SERVER_CERT_FILE)
    except FileNotFoundError:
        print(f" L·ªói: Kh√¥ng t√¨m th·∫•y t·ªáp ch·ª©ng ch·ªâ '{SERVER_CERT_FILE}'.")
        return

    # T·∫°o socket v√† "b·ªçc" b·∫±ng SSL
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    ssl_socket = context.wrap_socket(sock, server_hostname=HOST)

    try:
        ssl_socket.connect((HOST, PORT))
        print(f" ƒê√£ k·∫øt n·ªëi an to√†n ƒë·∫øn server {HOST}:{PORT}")

        # H·ªèi ng∆∞·ªùi d√πng bi·ªát danh
        nickname = input("Nh·∫≠p bi·ªát danh c·ªßa b·∫°n ƒë·ªÉ v√†o chat: ")
        print(f"Ch√†o m·ª´ng {nickname}! G√µ 'exit' ƒë·ªÉ tho√°t.")

        # B·∫Øt ƒë·∫ßu lu·ªìng nh·∫≠n tin nh·∫Øn
        thread = threading.Thread(target=receive_messages, args=(ssl_socket,))
        thread.daemon = True
        thread.start()

        # V√≤ng l·∫∑p ch√≠nh ƒë·ªÉ g·ª≠i tin nh·∫Øn
        while thread.is_alive():
            message = input("> ")
            if message.lower() == 'exit':
                break
            
            # G·∫Øn bi·ªát danh v√†o tr∆∞·ªõc tin nh·∫Øn
            full_message = f"[{nickname}]: {message}"
            ssl_socket.sendall(full_message.encode('utf-8'))
            
    except ssl.SSLCertVerificationError:
        print(f" L·ªói x√°c th·ª±c ch·ª©ng ch·ªâ. Ch·ª©ng ch·ªâ c·ªßa server kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng kh·ªõp.")
    except ConnectionRefusedError:
        print(" K·∫øt n·ªëi b·ªã t·ª´ ch·ªëi. Server c√≥ ƒëang ch·∫°y kh√¥ng?")
    except KeyboardInterrupt:
        print("\n ƒêang tho√°t...")
    except Exception as e:
        print(f" L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
    finally:
        ssl_socket.close()

if __name__ == "__main__":
    main()